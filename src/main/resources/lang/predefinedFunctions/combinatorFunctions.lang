lang.version = v1.0.0
lang.name = Lang Standard Implementation (Combinator Functions)

## Combinator execution: a(b)
function combinator combA($a{FUNCTION_POINTER}, $b) {
    return $a($b)
}

## Combinator execution: a()
function combinator combA0($a{FUNCTION_POINTER}) {
    return $a()
}

## Combinator execution: a(b, c)
function combinator combA2($a{FUNCTION_POINTER}, $b, $c) {
    return $a($b, $c)
}

## Combinator execution: a(b, c, d)
function combinator combA3($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($b, $c, $d)
}

## Combinator execution: a(b, c, d, e)
function combinator combA4($a{FUNCTION_POINTER}, $b, $c, $d, $e) {
    return $a($b, $c, $d, $e)
}

## Combinator execution: a()
function combinator combAE($a{FUNCTION_POINTER}, $b) {
    return $a()
}

# TODO combAN
# TODO combAV

## Combinator execution: a(b, d, c)
function combinator combAX($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($b, $d, $c)
}

# TODO combAZ

## Combinator execution: a(b(c))
function combinator combB($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $a($b($c))
}

## Combinator execution: a(b())
function combinator combB0($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}) {
    return $a($b())
}

## Combinator execution: a(b(c), b(d))
function combinator combB2($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($c), $b($d))
}

## Combinator execution: a(b(c), b(d), b(e))
function combinator combB3($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $a($b($c), $b($d), $b($e))
}

## Combinator execution: a(b())
function combinator combBE($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $a($b())
}

# TODO combBN
# TODO combBV

## Combinator execution: a(b(c, d))
function combinator combBX($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($c, $d))
}

# TODO combBZ

## Combinator execution: a(c)(b)
function combinator combC($a{FUNCTION_POINTER}, $b, $c) {
    $ret = $a($c)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(c) must be of type FUNCTION_POINTER"
    }

    return $ret($b)
}

## Combinator execution: a(b)
function combinator combC0($a{FUNCTION_POINTER}, $b, $c) {
    return $a($b)
}

## Combinator execution: a(c)
function combinator combC1($a{FUNCTION_POINTER}, $b, $c) {
    return $a($c)
}

## Combinator execution: a(c, b)
function combinator combC2($a{FUNCTION_POINTER}, $b, $c) {
    return $a($c, $b)
}

## Combinator execution: a(d, c, b)
function combinator combC3($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($d, $c, $b)
}

## Combinator execution: a(e, d, c, b)
function combinator combC4($a{FUNCTION_POINTER}, $b, $c, $d, $e) {
    return $a($e, $d, $c, $b)
}

## Combinator execution: a()
function combinator combCE($a{FUNCTION_POINTER}, $b, $c) {
    return $a()
}

## Combinator execution: a(c, d, b)
function combinator combCX($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($c, $d, $b)
}

## Combinator execution: a(b)(c(d))
function combinator combD($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d) {
    $retA = $a($b)

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b) must be of type FUNCTION_POINTER"
    }

    return $retA($c($d))
}

## Combinator execution: a(b, c(d))
function combinator combD2($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d) {
    return $a($b, $c($d))
}

## Combinator execution: a(c())
function combinator combDE($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d) {
    return $a($c())
}

## Combinator execution: a(b)(c(d)(e))
function combinator combE($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d, $e) {
    $retA = $a($b)

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b) must be of type FUNCTION_POINTER"
    }

    $retC = $c($d)

    if(!($retC ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by c(d) must be of type FUNCTION_POINTER"
    }

    return $retA($retC($e))
}

## Combinator execution: a(b, c(d, e))
function combinator combE3($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d, $e) {
    return $a($b, $c($d, $e))
}

## Combinator execution: a(b, c())
function combinator combEE($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d, $e) {
    return $a($b, $c())
}

## Combinator execution: a(c, b(d, e))
function combinator combE3($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $a($c, $b($d, $e))
}
