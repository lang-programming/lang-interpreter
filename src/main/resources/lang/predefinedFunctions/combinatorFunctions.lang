lang.version = v1.0.0
lang.name = Lang Standard Implementation (Combinator Functions)

## Combinator execution: a(b)
function combinator combA($a{FUNCTION_POINTER}, $b) {
    return $a($b)
}

## Combinator execution: a()
function combinator combA0($a{FUNCTION_POINTER}) {
    return $a()
}

## Combinator execution: a(b, c)
function combinator combA2($a{FUNCTION_POINTER}, $b, $c) {
    return $a($b, $c)
}

## Combinator execution: a(b, c, d)
function combinator combA3($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($b, $c, $d)
}

## Combinator execution: a(b, c, d, e)
function combinator combA4($a{FUNCTION_POINTER}, $b, $c, $d, $e) {
    return $a($b, $c, $d, $e)
}

## Combinator execution: a()
function combinator combAE($a{FUNCTION_POINTER}, $b) {
    return $a()
}

# TODO combAN
# TODO combAV

## Combinator execution: a(b, d, c)
function combinator combAX($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($b, $d, $c)
}

# TODO combAZ

## Combinator execution: a(b(c))
function combinator combB($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $a($b($c))
}

## Combinator execution: a(b())
function combinator combB0($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}) {
    return $a($b())
}

## Combinator execution: a(b(c), b(d))
function combinator combB2($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($c), $b($d))
}

## Combinator execution: a(b(c), b(d), b(e))
function combinator combB3($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $a($b($c), $b($d), $b($e))
}

## Combinator execution: a(b())
function combinator combBE($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $a($b())
}

# TODO combBN
# TODO combBV

## Combinator execution: a(b(c, d))
function combinator combBX($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($c, $d))
}

# TODO combBZ

## Combinator execution: a(c)(b)
function combinator combC($a{FUNCTION_POINTER}, $b, $c) {
    $ret = $a($c)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(c) must be of type FUNCTION_POINTER"
    }

    return $ret($b)
}

## Combinator execution: a(b)
function combinator combC0($a{FUNCTION_POINTER}, $b, $c) {
    return $a($b)
}

## Combinator execution: a(c)
function combinator combC1($a{FUNCTION_POINTER}, $b, $c) {
    return $a($c)
}

## Combinator execution: a(c, b)
function combinator combC2($a{FUNCTION_POINTER}, $b, $c) {
    return $a($c, $b)
}

## Combinator execution: a(d, c, b)
function combinator combC3($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($d, $c, $b)
}

## Combinator execution: a(e, d, c, b)
function combinator combC4($a{FUNCTION_POINTER}, $b, $c, $d, $e) {
    return $a($e, $d, $c, $b)
}

## Combinator execution: a()
function combinator combCE($a{FUNCTION_POINTER}, $b, $c) {
    return $a()
}

## Combinator execution: a(c, d, b)
function combinator combCX($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($c, $d, $b)
}

## Combinator execution: a(b)(c(d))
function combinator combD($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d) {
    $retA = $a($b)

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b) must be of type FUNCTION_POINTER"
    }

    return $retA($c($d))
}

## Combinator execution: a(b, c(d))
function combinator combD2($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d) {
    return $a($b, $c($d))
}

## Combinator execution: a(c())
function combinator combDE($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d) {
    return $a($c())
}

## Combinator execution: a(b)(c(d)(e))
function combinator combE($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d, $e) {
    $retA = $a($b)

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b) must be of type FUNCTION_POINTER"
    }

    $retC = $c($d)

    if(!($retC ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by c(d) must be of type FUNCTION_POINTER"
    }

    return $retA($retC($e))
}

## Combinator execution: a(b, c(d, e))
function combinator combE3($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d, $e) {
    return $a($b, $c($d, $e))
}

## Combinator execution: a(b, c())
function combinator combEE($a{FUNCTION_POINTER}, $b, $c{FUNCTION_POINTER}, $d, $e) {
    return $a($b, $c())
}

## Combinator execution: a(c, b(d, e))
function combinator combEX($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $a($c, $b($d, $e))
}

## Combinator execution: c(b)
function combinator combF1($a, $b, $c{FUNCTION_POINTER}) {
    return $c($b)
}

## Combinator execution: c(b)(a)
function combinator combF($a, $b, $c{FUNCTION_POINTER}) {
    $retC = $c($b)

    if(!($retC ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by c(b) must be of type FUNCTION_POINTER"
    }

    return $retC($a)
}

## Combinator execution: c(b, a)
function combinator combF2($a, $b, $c{FUNCTION_POINTER}) {
    return $c($b, $a)
}

## Combinator execution: d(c, b, a)
function combinator combF3($a, $b, $c, $d{FUNCTION_POINTER}) {
    return $d($c, $b, $a)
}

## Combinator execution: e(d, c, b, a)
function combinator combF4($a, $b, $c, $d, $e{FUNCTION_POINTER}) {
    return $e($d, $c, $b, $a)
}

## Combinator execution: c()
function combinator combFE($a, $b, $c{FUNCTION_POINTER}) {
    return $c()
}

## Combinator execution: a(d)(b(c))
function combinator combG($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retA = $a($d)

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(d) must be of type FUNCTION_POINTER"
    }

    return $retA($b($c))
}

## Combinator execution: a(d, b(c))
function combinator combG2($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($d, $b($c))
}

## Combinator execution: a(d, b())
function combinator combGE($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($d, $b())
}

## Combinator execution: a(b(d), c)
function combinator combGX($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($d), $c)
}

## Combinator execution: a(b)(c)(b)
function combinator combH($a{FUNCTION_POINTER}, $b, $c) {
    $retA = $a($b)

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b) must be of type FUNCTION_POINTER"
    }

    $retA2 = $retA($c)

    if(!($retA2 ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b)(c) must be of type FUNCTION_POINTER"
    }

    return $retA2($b)
}

## Combinator execution: a(b, c, b)
function combinator combH3($a{FUNCTION_POINTER}, $b, $c) {
    return $a($b, $c, $b)
}

## Combinator execution: a(b(c), b(d), b(c))
function combinator combHB($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($c), $b($d), $b($c))
}

## Combinator execution: a(b(), c(), b())
function combinator combHE($a{FUNCTION_POINTER}, $b, $c) {
    return $a($b(), $c(), $b())
}

## Combinator execution: a(c, b, c)
function combinator combHX($a{FUNCTION_POINTER}, $b, $c) {
    return $a($c, $b, $c)
}

## Combinator execution: a
function combinator combI($a) {
    return $a
}

## Combinator execution: a(b)(a(d)(c))
function combinator combJ($a{FUNCTION_POINTER}, $b, $c, $d) {
    $retA = $a($b)

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b) must be of type FUNCTION_POINTER"
    }

    $retAA = $a($d)

    if(!($retAA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(d) must be of type FUNCTION_POINTER"
    }

    return $retA($retAA($c))
}

## Combinator execution: a(b, a(d, c))
function combinator combJ3($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($b, $a($d, $c))
}

## Combinator execution: a(b, a(c, d))
function combinator combJX($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($b, $a($c, $d))
}

## Combinator execution: a(b, a())
function combinator combJE($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($b, $a())
}

## Combinator execution: a
function combinator combK($a, $b) {
    return $a
}

## Combinator execution: a
function combinator combK3($a, $b, $c) {
    return $a
}

## Combinator execution: a
function combinator combK4($a, $b, $c, $d) {
    return $a
}

## Combinator execution: a
function combinator combK5($a, $b, $c, $d, $e) {
    return $a
}

## Combinator execution: d
function combinator combKD($a, $b, $c, $d, $e) {
    return $d
}

## Combinator execution: e
function combinator combKE($a, $b, $c, $d, $e) {
    return $e
}

## Combinator execution: b
function combinator combKI($a, $b) {
    return $b
}

## Combinator execution: c
function combinator combKX($a, $b, $c) {
    return $c
}

## Combinator execution: a(b(b))
function combinator combL($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}) {
    return $a($b($b))
}

## Combinator execution: a(b(b, c))
function combinator combL2($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $a($b($b, $c))
}

## Combinator execution: a(b(b, c, d))
function combinator combL3($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($b, $c, $d))
}

## Combinator execution: a(b(b, c, d, e))
function combinator combL4($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $a($b($b, $c, $d, $e))
}

## Combinator execution: a(a)
function combinator combM($a{FUNCTION_POINTER}) {
    return $a($a)
}

## Combinator execution: a(a, b)
function combinator combM2($a{FUNCTION_POINTER}, $b) {
    return $a($a, $b)
}

## Combinator execution: a(a, b, c)
function combinator combM3($a{FUNCTION_POINTER}, $b, $c) {
    return $a($a, $b, $c)
}

## Combinator execution: a(a, b, c, d)
function combinator combM4($a{FUNCTION_POINTER}, $b, $c, $d) {
    return $a($a, $b, $c, $d)
}

## Combinator execution: a(a, b, c, d, e)
function combinator combM5($a{FUNCTION_POINTER}, $b, $c, $d, $e) {
    return $a($a, $b, $c, $d, $e)
}

## Combinator execution: a(b)(c)
function combinator combN($a{FUNCTION_POINTER}, $b, $c) {
    $retA = $a($b)

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b) must be of type FUNCTION_POINTER"
    }

    return $retA($c)
}

## Combinator execution: a()()
function combinator combN0($a{FUNCTION_POINTER}) {
    $retA = $a()

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a() must be of type FUNCTION_POINTER"
    }

    return $retA()
}

## Combinator execution: a()(c)
function combinator combN1($a{FUNCTION_POINTER}, $b, $c) {
    $retA = $a()

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a() must be of type FUNCTION_POINTER"
    }

    return $retA($c)
}

## Combinator execution: a(b)(c)(d)
function combinator combN3($a{FUNCTION_POINTER}, $b, $c, $d) {
    $ret = $a($b)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b) must be of type FUNCTION_POINTER"
    }

    $ret = $a($c)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b)(c) must be of type FUNCTION_POINTER"
    }

    return $ret($d)
}

## Combinator execution: a(b)(c)(d)(e)
function combinator combN4($a{FUNCTION_POINTER}, $b, $c, $d, $e) {
    $ret = $a($b)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b) must be of type FUNCTION_POINTER"
    }

    $ret = $a($c)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b)(c) must be of type FUNCTION_POINTER"
    }

    $ret = $a($d)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b)(c)(d) must be of type FUNCTION_POINTER"
    }

    return $ret($e)
}

## Combinator execution: a()()
function combinator combNE($a{FUNCTION_POINTER}, $b, $c) {
    $retA = $a()

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a() must be of type FUNCTION_POINTER"
    }

    return $retA()
}

# TODO combNN

## Combinator execution: a(a)(a)
function combinator combNM($a{FUNCTION_POINTER}) {
    $ret = $a($a)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(a) must be of type FUNCTION_POINTER"
    }

    return $ret($a)
}

# TODO combNV
# TODO combNZ

## Combinator execution: b(a(b))
function combinator combO($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}) {
    return $b($a($b))
}

## Combinator execution: b(a(b, c))
function combinator combO2($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $b($a($b, $c))
}

## Combinator execution: b(a(b, c, d))
function combinator combO3($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $b($a($b, $c, $d))
}

## Combinator execution: b(a(b, c, d, e))
function combinator combO4($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $b($a($b, $c, $d, $e))
}

## Combinator execution: a(b(d))(c(d))
function combinator combP($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c{FUNCTION_POINTER}, $d) {
    $ret = $a($b($d))

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(d)) must be of type FUNCTION_POINTER"
    }

    return $ret($c($d))
}

## Combinator execution: a(b(d), c(d))
function combinator combP2($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c{FUNCTION_POINTER}, $d) {
    return $a($b($d), $c($d))
}

## Combinator execution: a(b(e), c(e), d(e))
function combinator combP3($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c{FUNCTION_POINTER}, $d{FUNCTION_POINTER}, $e) {
    return $a($b($e), $c($e), $d($e))
}

## Combinator execution: a(b(), c())
function combinator combPE($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c{FUNCTION_POINTER}, $d) {
    return $a($b(), $c())
}

# TODO combPN
# TODO combPV

## Combinator execution: a(c(d), b(d))
function combinator combPX($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c{FUNCTION_POINTER}, $d) {
    return $a($c($d), $b($d))
}

# TODO combPZ

## Combinator execution: b(a(c))
function combinator combQ($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $b($a($c))
}

## Combinator execution: b(a())
function combinator combQ0($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}) {
    return $b($a())
}

## Combinator execution: b(a())
function combinator combQE($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $b($a())
}

# TODO combQN
# TODO combQV

## Combinator execution: c(b(a))
function combinator combQX($a, $b{FUNCTION_POINTER}, $c{FUNCTION_POINTER}) {
    return $c($b($a))
}

# TODO combQZ

## Combinator execution: b(c)(a)
function combinator combR($a, $b{FUNCTION_POINTER}, $c) {
    $retB = $b($c)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(c) must be of type FUNCTION_POINTER"
    }

    return $retB($a)
}

## Combinator execution: b(a)
function combinator combR0($a, $b{FUNCTION_POINTER}, $c) {
    return $b($a)
}

## Combinator execution: b(c)
function combinator combR1($a, $b{FUNCTION_POINTER}, $c) {
    return $b($c)
}

## Combinator execution: b(c, a)
function combinator combR2($a, $b{FUNCTION_POINTER}, $c) {
    return $b($c, $a)
}

## Combinator execution: b(d, c, a)
function combinator combR3($a, $b{FUNCTION_POINTER}, $c, $d) {
    return $b($d, $c, $a)
}

## Combinator execution: b(e, d, c, a)
function combinator combR4($a, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $b($e, $d, $c, $a)
}

## Combinator execution: b()
function combinator combRE($a, $b{FUNCTION_POINTER}, $c) {
    return $b()
}

## Combinator execution: b(a, c)
function combinator combRX($a, $b{FUNCTION_POINTER}, $c) {
    return $b($a, $c)
}

## Combinator execution: a(c)(b(c))
function combinator combS($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    $retA = $a($c)

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(c) must be of type FUNCTION_POINTER"
    }

    return $retA($b($c))
}

## Combinator execution: a(c, b(c))
function combinator combS2($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $a($c, $b($c))
}

## Combinator execution: a(c, b())
function combinator combSE($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $a($c, $b())
}

## Combinator execution: a(b(c), c)
function combinator combSX($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $a($b($c), $c)
}

## Combinator execution: b(a)
function combinator combT($a, $b{FUNCTION_POINTER}) {
    return $b($a)
}

## Combinator execution: b(a, c, d)
function combinator combT3($a, $b{FUNCTION_POINTER}, $c, $d) {
    return $b($a, $c, $d)
}

## Combinator execution: b(a, c, d, e)
function combinator combT4($a, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $b($a, $c, $d, $e)
}

## Combinator execution: b()
function combinator combTE($a, $b{FUNCTION_POINTER}) {
    return $b()
}

# TODO combTN
# TODO combTV

## Combinator execution: b(d, c, a)
function combinator combTX($a, $b{FUNCTION_POINTER}, $c, $d) {
    return $b($d, $c, $a)
}

# TODO combTZ

## Combinator execution: a(b(d))(c(e))
function combinator combU($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c{FUNCTION_POINTER}, $d, $e) {
    $ret = $a($b($d))

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(d)) must be of type FUNCTION_POINTER"
    }

    return $ret($c($e))
}

## Combinator execution: a(b(d), c(e))
function combinator combU2($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c{FUNCTION_POINTER}, $d, $e) {
    return $a($b($d), $c($e))
}

## Combinator execution: a(b(), c())
function combinator combUE($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c{FUNCTION_POINTER}, $d, $e) {
    return $a($b(), $c())
}

## Combinator execution: a(d(b), e(c))
function combinator combUX($a{FUNCTION_POINTER}, $b, $c, $d{FUNCTION_POINTER}, $e{FUNCTION_POINTER}) {
    return $a($d($b), $e($c))
}

## Combinator execution: c(a)
function combinator combV1($a, $b, $c{FUNCTION_POINTER}) {
    return $c($a)
}

## Combinator execution: c(a)(b)
function combinator combV($a, $b, $c{FUNCTION_POINTER}) {
    $ret = $c($a)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by c(a) must be of type FUNCTION_POINTER"
    }

    return $ret($b)
}

## Combinator execution: c(a, b)
function combinator combV2($a, $b, $c{FUNCTION_POINTER}) {
    return $c($a, $b)
}

## Combinator execution: d(a, b, c)
function combinator combV3($a, $b, $c, $d{FUNCTION_POINTER}) {
    return $d($a, $b, $c)
}

## Combinator execution: e(a, b, c, d)
function combinator combV4($a, $b, $c, $d, $e{FUNCTION_POINTER}) {
    return $e($a, $b, $c, $d)
}

## Combinator execution: a(b)(b)
function combinator combW($a{FUNCTION_POINTER}, $b) {
    $ret = $a($b)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b) must be of type FUNCTION_POINTER"
    }

    return $ret($b)
}

## Combinator execution: a(b, b)
function combinator combW2($a{FUNCTION_POINTER}, $b) {
    return $a($b, $b)
}

## Combinator execution: a(b, b, b)
function combinator combW3($a{FUNCTION_POINTER}, $b) {
    return $a($b, $b, $b)
}

## Combinator execution: a(b, b, b, b)
function combinator combW4($a{FUNCTION_POINTER}, $b) {
    return $a($b, $b, $b, $b)
}

## Combinator execution: a(b, b, b, b, b)
function combinator combW5($a{FUNCTION_POINTER}, $b) {
    return $a($b, $b, $b, $b, $b)
}

## Combinator execution: a(b(c), b(c))
function combinator combWB($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c) {
    return $a($b($c), $b($c))
}

## Combinator execution: b(a, a)
function combinator combWX($a, $b{FUNCTION_POINTER}) {
    return $b($a, $a)
}

## Combinator execution: a(b(c), d)
function combinator combX1($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($c), $d)
}

## Combinator execution: a(c, b(d))
function combinator combX2($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($c, $b($d))
}

## Combinator execution: a(b(c, d), c)
function combinator combX3($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($c, $d), $c)
}

## Combinator execution: a(b(d, c), d)
function combinator combX4($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($d, $c), $d)
}

## Combinator execution: a(c, b(d, c))
function combinator combX5($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($c, $b($d, $c))
}

## Combinator execution: a(d, b(c, d))
function combinator combX6($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($d, $b($c, $d))
}

## Combinator execution: a(b(c, d), b(d, c))
function combinator combX7($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($c, $d), $b($d, $c))
}

## Combinator execution: a(b(c, c), b(d, d))
function combinator combX8($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($c, $c), $b($d, $d))
}

## Combinator execution: a(b(d, d), b(c, c))
function combinator combX9($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($d, $d), $b($c, $c))
}

## Combinator execution: a(b(c, d, c), b(d, c, d))
function combinator combXA($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($c, $d, $c), $b($d, $c, $d))
}

## Combinator execution: a(b(d, c, d), b(c, d, c))
function combinator combXB($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    return $a($b($d, $c, $d), $b($c, $d, $c))
}

## Combinator execution: a(b(c, e), b(d, e))
function combinator combXC($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $a($b($c, $e), $b($d, $e))
}

## Combinator execution: a(b(e, c), b(e, d))
function combinator combXD($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $a($b($e, $c), $b($e, $d))
}

## Combinator execution: a(b(e, d), c)
function combinator combXE($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $a($b($e, $d), $c)
}

## Combinator execution: a(b(d, e), c)
function combinator combXF($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d, $e) {
    return $a($b($d, $e), $c)
}

## Combinator execution: a(b(c))(d)
function combinator combXN1($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $ret = $a($b($c))

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(c)) must be of type FUNCTION_POINTER"
    }

    return $ret($d)
}

## Combinator execution: a(c)(b(d))
function combinator combXN2($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $ret = $a($c)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(c) must be of type FUNCTION_POINTER"
    }

    return $ret($b($d))
}

## Combinator execution: a(b(c)(d))(c)
function combinator combXN3($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $ret = $b($c)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(c) must be of type FUNCTION_POINTER"
    }

    $ret = $a($ret($d))

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(c)(d)) must be of type FUNCTION_POINTER"
    }

    return $ret($c)
}

## Combinator execution: a(b(d)(c))(d)
function combinator combXN4($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $ret = $b($d)

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(d) must be of type FUNCTION_POINTER"
    }

    $ret = $a($ret($c))

    if(!($ret ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(d)(c)) must be of type FUNCTION_POINTER"
    }

    return $ret($d)
}

## Combinator execution: a(c)(b(d)(c))
function combinator combXN5($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retA = $a($c)

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(c) must be of type FUNCTION_POINTER"
    }

    $retB = $b($d)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(d) must be of type FUNCTION_POINTER"
    }

    return $retA($retB($c))
}

## Combinator execution: a(d)(b(c)(d))
function combinator combXN6($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retA = $a($d)

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(d) must be of type FUNCTION_POINTER"
    }

    $retB = $b($c)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(c) must be of type FUNCTION_POINTER"
    }

    return $retA($retB($d))
}

## Combinator execution: a(b(c)(d))(b(d)(c))
function combinator combXN7($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retB = $b($c)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(c) must be of type FUNCTION_POINTER"
    }

    $retA = $a($retB($d))

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(c)(d)) must be of type FUNCTION_POINTER"
    }

    $retB = $b($d)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(d) must be of type FUNCTION_POINTER"
    }

    return $retA($retB($c))
}

## Combinator execution: a(b(c)(c))(b(d)(d))
function combinator combXN8($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retB = $b($c)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(c) must be of type FUNCTION_POINTER"
    }

    $retA = $a($retB($c))

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(c)(c)) must be of type FUNCTION_POINTER"
    }

    $retB = $b($d)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(d) must be of type FUNCTION_POINTER"
    }

    return $retA($retB($d))
}

## Combinator execution: a(b(d)(d))(b(c)(c))
function combinator combXN9($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retB = $b($d)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(d) must be of type FUNCTION_POINTER"
    }

    $retA = $a($retB($d))

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(d)(d)) must be of type FUNCTION_POINTER"
    }

    $retB = $b($c)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(c) must be of type FUNCTION_POINTER"
    }

    return $retA($retB($c))
}

## Combinator execution: a(b(c)(d)(c))(b(d)(c)(d))
function combinator combXNA($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retB = $b($c)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(c) must be of type FUNCTION_POINTER"
    }

    $retB = $b($d)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(c)(d) must be of type FUNCTION_POINTER"
    }

    $retA = $a($retB($c))

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(c)(d)(c)) must be of type FUNCTION_POINTER"
    }

    $retB = $b($d)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(d) must be of type FUNCTION_POINTER"
    }

    $retB = $b($c)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(d)(c) must be of type FUNCTION_POINTER"
    }

    return $retA($retB($d))
}

## Combinator execution: a(b(d)(c)(d))(b(c)(d)(c))
function combinator combXNB($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retB = $b($d)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(d) must be of type FUNCTION_POINTER"
    }

    $retB = $b($c)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(d)(c) must be of type FUNCTION_POINTER"
    }

    $retA = $a($retB($d))

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(d)(c)(d)) must be of type FUNCTION_POINTER"
    }

    $retB = $b($c)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(c) must be of type FUNCTION_POINTER"
    }

    $retB = $b($d)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(c)(d) must be of type FUNCTION_POINTER"
    }

    return $retA($retB($c))
}

## Combinator execution: a(b(c)(e))(b(d)(e))
function combinator combXNC($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retB = $b($c)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(c) must be of type FUNCTION_POINTER"
    }

    $retA = $a($retB($e))

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(c)(e)) must be of type FUNCTION_POINTER"
    }

    $retB = $b($d)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(d) must be of type FUNCTION_POINTER"
    }

    return $retA($retB($e))
}

## Combinator execution: a(b(e)(c))(b(e)(d))
function combinator combXND($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retB = $b($e)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(e) must be of type FUNCTION_POINTER"
    }

    $retA = $a($retB($c))

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(e)(c)) must be of type FUNCTION_POINTER"
    }

    $retB = $b($e)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(e) must be of type FUNCTION_POINTER"
    }

    return $retA($retB($d))
}

## Combinator execution: a(b(e)(d))(c)
function combinator combXNE($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retB = $b($e)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(e) must be of type FUNCTION_POINTER"
    }

    $retA = $a($retB($d))

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(e)(d)) must be of type FUNCTION_POINTER"
    }

    return $retA($c)
}

## Combinator execution: a(b(d)(e))(c)
function combinator combXNF($a{FUNCTION_POINTER}, $b{FUNCTION_POINTER}, $c, $d) {
    $retB = $b($d)

    if(!($retB ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by b(d) must be of type FUNCTION_POINTER"
    }

    $retA = $a($retB($e))

    if(!($retA ~~ $LANG_TYPE_FUNCTION_POINTER)) {
        throw $LANG_ERROR_INVALID_FUNC_PTR, "The value returned by a(b(d)(e)) must be of type FUNCTION_POINTER"
    }

    return $retA($c)
}
