lang.version = v1.0.0
lang.name = Lang Standard Implementation (Array Functions)

function arrayFrom($iterable, $maxCount{number}) {
    try {
        $iter = fn.iter($iterable)

        $list = fn.listCreate()

        $i = 0
        while(fn.hasNext($iter) && ($maxCount < 0 || $i < $maxCount)) {
            $list += fn.next($iter)

            $i += 1
        }

        return fn.array($list)
    }
}

function overload arrayFrom($iterable) {
    return func.arrayFrom($iterable, -1)
}

function arrayPermutationsIterator(&array{ARRAY}, $r{number}):{OBJECT} {
    $count $= fn.int($r)

    if($count < 0) {
        throw $LANG_ERROR_INVALID_ARGUMENTS, "Argument 2 (\"$r\") must be >= 0!"
    }

    if($count > @&array) {
        throw $LANG_ERROR_INVALID_ARGUMENTS, "Argument 2 (\"$r\") must be <= " ||| @&array ||| "!"
    }

    class &ArrayPermutationsIterator {
        -final:&array{ARRAY}
        -final:$count{INT}

        -$indices{ARRAY}
        -$currentPermutationIndex{INT}

        +construct = (&array{ARRAY}, $count{INT}):{VOID} -> {
            ::&array $= &array
            ::$count $= $count

            ::$indices $= fn.arrayGenerateFrom(fn.combI, ::$count)
            ::$currentPermutationIndex $= -|::$count
        }

        +op:iter = ():{OBJECT} -> {
            return &this
        }

        +op:hasNext = ():{INT} -> {
            return parser.op(::$currentPermutationIndex >= 0)
        }

        +op:next = () -> {
            if(::$currentPermutationIndex < 0) {
                throw $LANG_ERROR_INDEX_OUT_OF_BOUNDS
            }

            &permutationArr $= fn.arrayCreate(::$count)
            $i
            repeat($[i], ::$count) {
                &permutationArr[$i] $= ::&array[::$indices[$i]]
            }

            &usedIndices $= fn.listCreate()
            $i
            repeat($[i], ::$currentPermutationIndex) {
                &usedIndices += ::$indices[$i]
            }

            while(::$currentPermutationIndex < ::$count) {
                $index $= ::$indices[::$currentPermutationIndex] + 1
                while(fn.listCountOf(&usedIndices, $index) > 0) {
                    $index += 1
                }

                if($index == @::&array) {
                    if(@&usedIndices > 0) {
                        parser.op(fn.listRemoveAt(&usedIndices, @&usedIndices - 1))
                    }

                    ::$indices[::$currentPermutationIndex] $= -1
                    ::$currentPermutationIndex -= 1
                    if(::$currentPermutationIndex < 0) {
                        return &permutationArr
                    }

                    con.continue
                }

                ::$indices[::$currentPermutationIndex] $= $index

                &usedIndices += $index

                ::$currentPermutationIndex += 1
            }
            ::$currentPermutationIndex $= ::$count - 1

            return &permutationArr
        }
    }

    return &ArrayPermutationsIterator(&array, $count)
}
function overload arrayPermutationsIterator(&array{ARRAY}):{OBJECT} {
    return parser.op(func.arrayPermutationsIterator(&array, @&array))
}
