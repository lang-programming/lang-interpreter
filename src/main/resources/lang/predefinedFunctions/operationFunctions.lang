lang.version = v1.0.0
lang.name = Lang Standard Implementation (Operation Functions)

function len($operand) {
    return parser.op(@$operand)
}

function deepCopy($operand) {
    return parser.op(^$operand)
}

function concat($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand ||| $rightSideOperand)
}

function spaceship($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand <=> $rightSideOperand)
}

function elvis($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand ?: $rightSideOperand)
}

function nullCoalescing($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand ?? $rightSideOperand)
}

function inlineIf($leftSideOperand, $middleOperand, $rightSideOperand) {
    return parser.op($leftSideOperand?$middleOperand:$rightSideOperand)
}

function inc($operand) {
    return parser.op(+|$operand)
}

function dec($operand) {
    return parser.op(-|$operand)
}

function pos($operand) {
    return parser.op(+$operand)
}

function inv($operand) {
    return parser.op(-$operand)
}

function add($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand + $rightSideOperand)
}

function sub($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand - $rightSideOperand)
}

function mul($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand * $rightSideOperand)
}

function pow($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand ** $rightSideOperand)
}

function div($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand / $rightSideOperand)
}

function truncDiv($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand ~/ $rightSideOperand)
}

function floorDiv($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand // $rightSideOperand)
}

function ceilDiv($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand ^/ $rightSideOperand)
}

function mod($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand % $rightSideOperand)
}

function and($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand & $rightSideOperand)
}

function or($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand | $rightSideOperand)
}

function xor($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand ^ $rightSideOperand)
}

function not($operand) {
    return parser.op(~$operand)
}

function lshift($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand << $rightSideOperand)
}

function rshift($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand >> $rightSideOperand)
}

function rzshift($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand >>> $rightSideOperand)
}

function getItem($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand[$rightSideOperand])
}

function setItem($leftSideOperand, $middleOperand, $rightSideOperand) {
    $leftSideOperand[$middleOperand] $= $rightSideOperand
}

function slice($leftSideOperand, $middleOperand, $rightSideOperand) {
    return parser.op($leftSideOperand[$middleOperand:$rightSideOperand])
}

function conNot($operand{bool}) {
    return parser.op(!$operand)
}

function conAnd($leftSideOperand{bool}, $rightSideOperand{bool}) {
    return parser.op($leftSideOperand && $rightSideOperand)
}

function conOr($leftSideOperand{bool}, $rightSideOperand{bool}) {
    return parser.op($leftSideOperand || $rightSideOperand)
}

function conEquals($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand == $rightSideOperand)
}

function conNotEquals($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand != $rightSideOperand)
}

function conStrictEquals($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand === $rightSideOperand)
}

function conStrictNotEquals($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand !== $rightSideOperand)
}

function conLessThan($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand < $rightSideOperand)
}

function conGreaterThan($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand > $rightSideOperand)
}

function conLessThanOrEquals($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand <= $rightSideOperand)
}

function conGreaterThanOrEquals($leftSideOperand, $rightSideOperand) {
    return parser.op($leftSideOperand >= $rightSideOperand)
}
