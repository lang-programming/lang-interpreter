lang.version = v1.0.0
lang.name = Lang Standard Implementation (Math Functions)

function inci($number{number}) {
    return parser.op($LANG_TYPE_INT($number) + 1)
}

function deci($number{number}) {
    return parser.op($LANG_TYPE_INT($number) - 1)
}

function invi($number{number}) {
    return parser.op(-$LANG_TYPE_INT($number))
}

function subi($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_INT($a) - $LANG_TYPE_INT($b))
}

function divi($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_INT($a) // $LANG_TYPE_INT($b))
}

function modi($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_INT($a) % $LANG_TYPE_INT($b))
}

function andi($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_INT($a) & $LANG_TYPE_INT($b))
}

function ori($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_INT($a) | $LANG_TYPE_INT($b))
}

function xori($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_INT($a) ^ $LANG_TYPE_INT($b))
}

function noti($number{number}) {
    return parser.op(~$LANG_TYPE_INT($number))
}

function lshifti($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_INT($a) << $LANG_TYPE_INT($b))
}

function rshifti($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_INT($a) >> $LANG_TYPE_INT($b))
}

function rzshifti($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_INT($a) >>> $LANG_TYPE_INT($b))
}

function incl($number{number}) {
    return parser.op($LANG_TYPE_LONG($number) + 1)
}

function decl($number{number}) {
    return parser.op($LANG_TYPE_LONG($number) - 1)
}

function invl($number{number}) {
    return parser.op(-$LANG_TYPE_LONG($number))
}

function subl($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_LONG($a) - $LANG_TYPE_LONG($b))
}

function divl($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_LONG($a) // $LANG_TYPE_LONG($b))
}

function modl($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_LONG($a) % $LANG_TYPE_LONG($b))
}

function andl($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_LONG($a) & $LANG_TYPE_LONG($b))
}

function orl($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_LONG($a) | $LANG_TYPE_LONG($b))
}

function xorl($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_LONG($a) ^ $LANG_TYPE_LONG($b))
}

function notl($number{number}) {
    return parser.op(~$LANG_TYPE_LONG($number))
}

function lshiftl($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_LONG($a) << $LANG_TYPE_LONG($b))
}

function rshiftl($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_LONG($a) >> $LANG_TYPE_LONG($b))
}

function rzshiftl($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_LONG($a) >>> $LANG_TYPE_LONG($b))
}

function incf($number{number}) {
    return parser.op($LANG_TYPE_FLOAT($number) + 1)
}

function decf($number{number}) {
    return parser.op($LANG_TYPE_FLOAT($number) - 1)
}

function invf($number{number}) {
    return parser.op(-$LANG_TYPE_FLOAT($number))
}

function subf($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_FLOAT($a) - $LANG_TYPE_FLOAT($b))
}

function divf($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_FLOAT($a) // $LANG_TYPE_FLOAT($b))
}

function incd($number{number}) {
    return parser.op($LANG_TYPE_DOUBLE($number) + 1)
}

function decd($number{number}) {
    return parser.op($LANG_TYPE_DOUBLE($number) - 1)
}

function invd($number{number}) {
    return parser.op(-$LANG_TYPE_DOUBLE($number))
}

function subd($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_DOUBLE($a) - $LANG_TYPE_DOUBLE($b))
}

function divd($a{number}, $b{number}) {
    return parser.op($LANG_TYPE_DOUBLE($a) // $LANG_TYPE_DOUBLE($b))
}

function min($firstArg, &args...) {
    $min $= $firstArg

    $ele
    foreach($[ele], &args) {
        if($ele < $min) {
            $min $= $ele
        }
    }

    return $min
}

function max($firstArg, &args...) {
    $max $= $firstArg

    $ele
    foreach($[ele], &args) {
        if($ele > $max) {
            $max $= $ele
        }
    }

    return $max
}
